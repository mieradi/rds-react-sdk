:root {
  --breakpoints: (s: 760px, l: 1024px, layout-s: 810px, layout-l: 1102px);
  --masthead_height: 72px;
  // 2. Grid vars
  // ------------
  --grid-gutter: 30px;
  --layout-gutter: var(--grid-gutter) + 1px; // Used by grid and flex to set gutters with an included 1px for the border

  // 2. Margins/spacing
  // ------------------
  --masthead_height: 72px;

  --margin-bottom: 30px;

  // Block Spacing
  --block-margin: 40px;
  --block-padding-s: 25px;
  --block-padding-m: 30px;
  // 4. Colors
  // ---------
  // Primary palette

  // CU digital near black
  --black: #222;

  // CU digital grey
  --grey: #f3f3f3;

  // CU digital red
  --red: #bf112b;
  --light-red: #f9e6e9;

  // Main link color
  --link: #105f83;

  // Other colors
  --blue: #91d5ff; // info foreground
  --light-blue: #e6f7ff; // info background
  --pink: #f9e6e9; // error background
  --green: #45bf2e; // success foreground
  --light-green: #fafff5; // success background
  --yellow: #faab08; // warning foreground
  --light-yellow: #fffaf1; // warning background

  // 50-44 shades of grey
  // mostly for light bgs
  --grey-yoda: #eaeaea;
  --grey-kenobi: #dfdfdf;
  --grey-luke: #b1b1b1;

  // for dark bgs or lighter icons
  --grey-anakin: #939393;
  --grey-vader: #767676;
  --grey-emperor: #535353;

  // Tertiary brand colours for student and enrolment initiatives
  --student-blue-grey: #e1e8f0;
  --student-coral: #f86759;
  --student-slate-grey: #939393;
  --student-turquoise: #6ed3cf;

  // 5. Fonts
  // -------------

  --font-family: 'Gotham Narrow SSm A', 'Gotham Narrow SSm B', -apple-system,
    'blinkmacsystemfont', 'Segoe UI', 'Roboto', 'Helvetica Neue', 'Helvetica',
    'Arial', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji',
    'Segoe UI Symbol';

  // 6. Type Scale
  // -------------
  --pixel12: 12px;
  --pixel13: 13px;
  --pixel14: 14px;
  --pixel15: 15px;
  --pixel16: 16px;
  --pixel18: 18px;
  --pixel20: 20px;
  --pixel24: 24px;
  --pixel28: 28px;
  --pixel30: 30px;
  --pixel36: 36px;
  --pixel48: 48px;
  --pixel54: 54px;

  --z-index-10000: 10000;

  // 8. Drop shadows
  // lighter to darker
  // ds = drop shadow
  // y = yoda, k = kenobi, l = luke
  --ds-y: 0 1px 2px rgba(var(--black), 0.2);
  --ds-k: 0 5px 8px 2px rgba(var(--grey-emperor), 0.1);
  --ds-l: 0 5px 18px 2px rgba(83, 83, 83, 0.2);
}

// Version 0.1.2

//  Project wide variables
//  ----------------------
//
//  Table of Contents:
//
//  0. RDS version
//  1. Media query breakpoints
//  2. Grid vars
//  3. Margins/spacing
//  4. Colors
//  5. Fonts
//  6. Type scale
//  7. z-index scale

// 0. RDS version
// --------------
$version: '0.20.0';

// 1. Media query breakpoints
// --------------------------
$breakpoints: (
  s: 760px,
  l: 1024px,
  layout-s: 810px,
  layout-l: 1102px,
);

// 2. Grid vars
// ------------
$grid-gutter: 30px !default;
$layout-gutter: $grid-gutter + 1px; // Used by grid and flex to set gutters with an included 1px for the border

// 2. Margins/spacing
// ------------------
$masthead_height: 72px;

$margin-bottom: 30px !default;

// Block Spacing
$block-margin: 40px !default;
$block-padding-s: 25px !default;
$block-padding-m: 30px !default;

// 4. Colors
// ---------
// Primary palette

// CU digital near black
$black: #222;

// CU digital grey
$grey: #f3f3f3;

// CU digital red
$red: #bf112b;
$light-red: #f9e6e9;

// Main link color
$link: #105f83;

// Other colors
$blue: #91d5ff; // info foreground
$light-blue: #e6f7ff; // info background
$pink: #f9e6e9; // error background
$green: #45bf2e; // success foreground
$light-green: #fafff5; // success background
$yellow: #faab08; // warning foreground
$light-yellow: #fffaf1; // warning background

// 50-44 shades of grey
// mostly for light bgs
$grey-yoda: #eaeaea;
$grey-kenobi: #dfdfdf;
$grey-luke: #b1b1b1;

// for dark bgs or lighter icons
$grey-anakin: #939393;
$grey-vader: #767676;
$grey-emperor: #535353;

// Tertiary brand colours for student and enrolment initiatives
$student-blue-grey: #e1e8f0;
$student-coral: #f86759;
$student-slate-grey: #939393;
$student-turquoise: #6ed3cf;

// 5. Fonts
// -------------

$font-family: 'Gotham Narrow SSm A', 'Gotham Narrow SSm B', -apple-system,
  'blinkmacsystemfont', 'Segoe UI', 'Roboto', 'Helvetica Neue', 'Helvetica',
  'Arial', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';

// 6. Type Scale
// -------------
$pixel12: 12px;
$pixel13: 13px;
$pixel14: 14px;
$pixel15: 15px;
$pixel16: 16px;
$pixel18: 18px;
$pixel20: 20px;
$pixel24: 24px;
$pixel28: 28px;
$pixel30: 30px;
$pixel36: 36px;
$pixel48: 48px;
$pixel54: 54px;

// 7. z-index scale
// ----------------

$z-index-10000: 10000;

// 8. Drop shadows
// lighter to darker
// ds = drop shadow
// y = yoda, k = kenobi, l = luke
$ds-y: 0 1px 2px rgba($black, 0.2);
$ds-k: 0 5px 8px 2px rgba($grey-emperor, 0.1);
$ds-l: 0 5px 18px 2px rgba(83, 83, 83, 0.2);

// @charset "UTF-8";

//     _            _           _                           _ _
//    (_)          | |         | |                         | (_)
//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _
//    | | '_ \ / __| | | | |/ _` |/ _ \ | '_ ` _ \ / _ \/ _` | |/ _` |
//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |
//    |_|_| |_|\___|_|\__,_|\__,_|\___| |_| |_| |_|\___|\__,_|_|\__,_|
//
//      Simple, elegant and maintainable media queries in Sass
//                        v1.4.9
//
//                http://include-media.com
//
//         Authors: Eduardo Boucas (@eduardoboucas)
//                  Hugo Giraudel (@hugogiraudel)
//
//      This project is licensed under the terms of the MIT license

////
/// include-media library public configuration
/// @author Eduardo Boucas
/// @access public
////

///
/// Creates a list of global breakpoints
///
/// @example scss - Creates a single breakpoint with the label `phone`
///  $breakpoints: ('phone': 320px);
///

// ** Set in base / vars.scss
// $breakpoints: (
//   'phone': 320px,
//   'tablet': 768px,
//   'desktop': 1024px
// ) !default;

///
/// Creates a list of static expressions or media types
///
/// @example scss - Creates a single media type (screen)
///  $media-expressions: ('screen': 'screen');
///
/// @example scss - Creates a static expression with logical disjunction (OR operator)
///  $media-expressions: (
///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'
///  );
///
$media-expressions: (
  'screen': 'screen',
  'print': 'print',
  'handheld': 'handheld',
  'landscape': '(orientation: landscape)',
  'portrait': '(orientation: portrait)',
  'retina2x':
    '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',
  'retina3x':
    '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)',
) !default;

///
/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals
///
/// @example scss - Interval for pixels is defined as `1` by default
///  @include media('>128px') {}
///
///  /* Generates: */
///  @media (min-width: 129px) {}
///
/// @example scss - Interval for ems is defined as `0.01` by default
///  @include media('>20em') {}
///
///  /* Generates: */
///  @media (min-width: 20.01em) {}
///
/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`
///  @include media('>2.0rem') {}
///
///  /* Generates: */
///  @media (min-width: 2.1rem) {}
///
$unit-intervals: (
  'px': 1,
  'em': 0.01,
  'rem': 0.1,
  '': 0,
) !default;

///
/// Defines whether support for media queries is available, useful for creating separate stylesheets
/// for browsers that don't support media queries.
///
/// @example scss - Disables support for media queries
///  $im-media-support: false;
///  @include media('>=tablet') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///  /* Generates: */
///  .foo {
///    color: tomato;
///  }
///
$im-media-support: true !default;

///
/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or
/// intercept the breakpoint will be displayed, any others will be ignored.
///
/// @example scss - This media query will show because it intercepts the static breakpoint
///  $im-media-support: false;
///  $im-no-media-breakpoint: 'desktop';
///  @include media('>=tablet') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///  /* Generates: */
///  .foo {
///    color: tomato;
///  }
///
/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint
///  $im-media-support: false;
///  $im-no-media-breakpoint: 'tablet';
///  @include media('>=desktop') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///  /* No output */
///
$im-no-media-breakpoint: 'desktop' !default;

///
/// Selects which media expressions are allowed in an expression for it to be used when media queries
/// are not supported.
///
/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions
///  $im-media-support: false;
///  $im-no-media-breakpoint: 'desktop';
///  $im-no-media-expressions: ('screen');
///  @include media('>=tablet', 'screen') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///   /* Generates: */
///   .foo {
///     color: tomato;
///   }
///
/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted
///  $im-media-support: false;
///  $im-no-media-breakpoint: 'desktop';
///  $im-no-media-expressions: ('screen');
///  @include media('>=tablet', 'retina2x') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///  /* No output */
///
$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;

////
/// Cross-engine logging engine
/// @author Hugo Giraudel
/// @access private
////

///
/// Log a message either with `@error` if supported
/// else with `@warn`, using `feature-exists('at-error')`
/// to detect support.
///
/// @param {String} $message - Message to log
///
@function im-log($message) {
  @if feature-exists('at-error') {
    @error $message;
  } @else {
    @warn $message;
    $_: noop();
  }

  @return $message;
}

///
/// Wrapper mixin for the log function so it can be used with a more friendly
/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function
/// within functions because it is not possible to include a mixin in a function
/// and use the mixin everywhere else because it's much more elegant.
///
/// @param {String} $message - Message to log
///
@mixin log($message) {
  @if im-log($message) {
  }
}

///
/// Function with no `@return` called next to `@warn` in Sass 3.3
/// to trigger a compiling error and stop the process.
///
@function noop() {
}

///
/// Determines whether a list of conditions is intercepted by the static breakpoint.
///
/// @param {Arglist}   $conditions  - Media query conditions
///
/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint
///
@function im-intercepts-static-breakpoint($conditions...) {
  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);

  @if not $no-media-breakpoint-value {
    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {
    }
  }

  @each $condition in $conditions {
    @if not map-has-key($media-expressions, $condition) {
      $operator: get-expression-operator($condition);
      $prefix: get-expression-prefix($operator);
      $value: get-expression-value($condition, $operator);

      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or
        ($prefix == 'min' and $value > $no-media-breakpoint-value)
      {
        @return false;
      }
    } @else if not index($im-no-media-expressions, $condition) {
      @return false;
    }
  }

  @return true;
}

////
/// Parsing engine
/// @author Hugo Giraudel
/// @access private
////

///
/// Get operator of an expression
///
/// @param {String} $expression - Expression to extract operator from
///
/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`
///
@function get-expression-operator($expression) {
  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {
    @if str-index($expression, $operator) {
      @return $operator;
    }
  }

  // It is not possible to include a mixin inside a function, so we have to
  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because
  // functions cannot be called anywhere in Sass, we need to hack the call in
  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with
  // Sass 3.3, change this line in `@if im-log(..) {}` instead.
  $_: im-log('No operator found in `#{$expression}`.');
}

///
/// Get dimension of an expression, based on a found operator
///
/// @param {String} $expression - Expression to extract dimension from
/// @param {String} $operator - Operator from `$expression`
///
/// @return {String} - `width` or `height` (or potentially anything else)
///
@function get-expression-dimension($expression, $operator) {
  $operator-index: str-index($expression, $operator);
  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);
  $dimension: 'width';

  @if str-length($parsed-dimension) > 0 {
    $dimension: $parsed-dimension;
  }

  @return $dimension;
}

///
/// Get dimension prefix based on an operator
///
/// @param {String} $operator - Operator
///
/// @return {String} - `min` or `max`
///
@function get-expression-prefix($operator) {
  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');
}

///
/// Get value of an expression, based on a found operator
///
/// @param {String} $expression - Expression to extract value from
/// @param {String} $operator - Operator from `$expression`
///
/// @return {Number} - A numeric value
///
@function get-expression-value($expression, $operator) {
  $operator-index: str-index($expression, $operator);
  $value: str-slice($expression, $operator-index + str-length($operator));

  @if map-has-key($breakpoints, $value) {
    $value: map-get($breakpoints, $value);
  } @else {
    $value: to-number($value);
  }

  $interval: map-get($unit-intervals, unit($value));

  @if not $interval {
    // It is not possible to include a mixin inside a function, so we have to
    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because
    // functions cannot be called anywhere in Sass, we need to hack the call in
    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with
    // Sass 3.3, change this line in `@if im-log(..) {}` instead.
    $_: im-log('Unknown unit `#{unit($value)}`.');
  }

  @if $operator == '>' {
    $value: $value + $interval;
  } @else if $operator == '<' {
    $value: $value - $interval;
  }

  @return $value;
}

///
/// Parse an expression to return a valid media-query expression
///
/// @param {String} $expression - Expression to parse
///
/// @return {String} - Valid media query
///
@function parse-expression($expression) {
  // If it is part of $media-expressions, it has no operator
  // then there is no need to go any further, just return the value
  @if map-has-key($media-expressions, $expression) {
    @return map-get($media-expressions, $expression);
  }

  $operator: get-expression-operator($expression);
  $dimension: get-expression-dimension($expression, $operator);
  $prefix: get-expression-prefix($operator);
  $value: get-expression-value($expression, $operator);

  @return '(#{$prefix}-#{$dimension}: #{$value})';
}

///
/// Slice `$list` between `$start` and `$end` indexes
///
/// @access private
///
/// @param {List} $list - List to slice
/// @param {Number} $start [1] - Start index
/// @param {Number} $end [length($list)] - End index
///
/// @return {List} Sliced list
///
@function slice($list, $start: 1, $end: length($list)) {
  @if length($list) < 1 or $start > $end {
    @return ();
  }

  $result: ();

  @for $i from $start through $end {
    $result: append($result, nth($list, $i));
  }

  @return $result;
}

////
/// String to number converter
/// @author Hugo Giraudel
/// @access private
////

///
/// Casts a string into a number
///
/// @param {String | Number} $value - Value to be parsed
///
/// @return {Number}
///
@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: im-log('Value for `to-number` should be a number or a string.');
  }

  $first-character: str-slice($value, 1, 1);
  $result: 0;
  $digits: 0;
  $minus: ($first-character == '-');
  $numbers: (
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
  );

  // Remove +/- sign if present at first character
  @if ($first-character == '+' or $first-character == '-') {
    $value: str-slice($value, 2);
  }

  @for $i from 1 through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not(index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i));
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);
}

///
/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function to-length($value, $unit) {
  $units: (
    'px': 1px,
    'cm': 1cm,
    'mm': 1mm,
    '%': 1%,
    'ch': 1ch,
    'pc': 1pc,
    'in': 1in,
    'em': 1em,
    'rem': 1rem,
    'pt': 1pt,
    'ex': 1ex,
    'vw': 1vw,
    'vh': 1vh,
    'vmin': 1vmin,
    'vmax': 1vmax,
  );

  @if not index(map-keys($units), $unit) {
    $_: im-log('Invalid unit `#{$unit}`.');
  }

  @return $value * map-get($units, $unit);
}

///
/// This mixin aims at redefining the configuration just for the scope of
/// the call. It is helpful when having a component needing an extended
/// configuration such as custom breakpoints (referred to as tweakpoints)
/// for instance.
///
/// @author Hugo Giraudel
///
/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`
/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`
///
/// @example scss - Extend the global breakpoints with a tweakpoint
///  @include media-context(('custom': 678px)) {
///    .foo {
///      @include media('>phone', '<=custom') {
///       // ...
///      }
///    }
///  }
///
/// @example scss - Extend the global media expressions with a custom one
///  @include media-context($tweak-media-expressions: ('all': 'all')) {
///    .foo {
///      @include media('all', '>phone') {
///       // ...
///      }
///    }
///  }
///
/// @example scss - Extend both configuration maps
///  @include media-context(('custom': 678px), ('all': 'all')) {
///    .foo {
///      @include media('all', '>phone', '<=custom') {
///       // ...
///      }
///    }
///  }
///
@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {
  // Save global configuration
  $global-breakpoints: $breakpoints;
  $global-media-expressions: $media-expressions;

  // Update global configuration
  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;
  $media-expressions: map-merge(
    $media-expressions,
    $tweak-media-expressions
  ) !global;

  @content;

  // Restore global configuration
  $breakpoints: $global-breakpoints !global;
  $media-expressions: $global-media-expressions !global;
}

////
/// include-media public exposed API
/// @author Eduardo Boucas
/// @access public
////

///
/// Generates a media query based on a list of conditions
///
/// @param {Arglist}   $conditions  - Media query conditions
///
/// @example scss - With a single set breakpoint
///  @include media('>phone') { }
///
/// @example scss - With two set breakpoints
///  @include media('>phone', '<=tablet') { }
///
/// @example scss - With custom values
///  @include media('>=358px', '<850px') { }
///
/// @example scss - With set breakpoints with custom values
///  @include media('>desktop', '<=1350px') { }
///
/// @example scss - With a static expression
///  @include media('retina2x') { }
///
/// @example scss - Mixing everything
///  @include media('>=350px', '<tablet', 'retina3x') { }
///
@mixin media($conditions...) {
  @if ($im-media-support and length($conditions) == 0) or
    (not $im-media-support and im-intercepts-static-breakpoint($conditions...))
  {
    @content;
  } @else if ($im-media-support and length($conditions) > 0) {
    @media #{unquote(parse-expression(nth($conditions, 1)))} {
      // Recursive call
      @include media(slice($conditions, 2)...) {
        @content;
      }
    }
  }
}

// Reset from slightly edited version of minireset.css v0.0.3 | github.com/jgthms/minireset.css
// Combined with RDS opinions for baseline element styles
// Note: no '.classes' allowed here
// ---------------------------------
//
//  Table of Contents:
//
//   1. Document/body
//   2. Link and button styles
//   3. Headings
//   4. Content styles
//   5. Table styles
//   6. Pre/Code
//   7. Form elements

// 1. Document/body
// -----------------
* {
  margin: 0;
  padding: 0;
}

*,
*:before,
*:after {
  box-sizing: inherit;
}

html,
body {
  width: 100%;
  height: 100%;
  min-height: 100%;
  -webkit-text-size-adjust: none; // stops ios safari from growing text
}

html {
  box-sizing: border-box;
  scroll-behavior: smooth; // you've been hit by a... smooth criminal
}

body {
  background-color: white;
  margin: 0;
  font-family: 'Gotham Narrow SSm A', 'Gotham Narrow SSm B', -apple-system,
    'blinkmacsystemfont', 'Segoe UI', 'Roboto', 'Helvetica Neue', 'Helvetica',
    'Arial', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji',
    'Segoe UI Symbol';
  font-style: normal;
  color: var(--black);
}

// #content {
// 	padding-bottom: 20px;
// }

// for ie 11
main,
time,
img,
video,
audio,
figure {
  display: block;
}

// 2. Link and button styles
// -------------------------

a {
  font-weight: 500;
  text-decoration: none;
  outline: none;
  color: var(--black);
  cursor: pointer;

  &:focus {
    outline: 0 none;
  }
}

a:hover,
a:focus,
button:focus,
button:hover,
input[type='submit']:focus,
input[type='submit']:hover input[type='reset']:focus,
input[type='reset']:hover {
  text-decoration: none;
}

a[href='#content']:focus {
  top: calc(#{var(--masthead_height)} + 20px);
  left: 15px;
  z-index: 2;
  clip: initial;
  height: initial !important;
  width: initial !important;
  display: block;
  padding: 15px 20px !important;
  border-radius: 3px;
  border: 1px solid var(--grey-kenobi) !important;
  box-shadow: 0 5px 8px 2px rgba(var(--grey-emperor), 0.2);
  background: white;
}

button {
  cursor: pointer;
  padding: 0;
  border: none;
  outline: none;
  font: inherit;
  color: inherit;
  background: none;
}

// 3. Headings
// -----------
h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: 100%;
  font-weight: 500;
  margin-bottom: 16px;
  //line-height: 1.125;
}

h1 {
  font-size: var(--pixel28);
  padding-bottom: 0.3em;

  @include media('>s') {
    font-size: var(--pixel30);
  }
}

h2 {
  font-size: var(--pixel24);
  padding-bottom: 0.3em;

  @include media('>s') {
    font-size: var(--pixel28);
  }
}

h3 {
  font-size: var(--pixel20);

  @include media('>s') {
    font-size: var(--pixel24);
  }
}

h4,
h5,
h6 {
  font-size: var(--pixel16);

  @include media('>s') {
    font-size: var(--pixel18);
  }
}

// 4. Content styles
// -----------------
address {
  font-style: normal;
  line-height: 1.6;
}

p,
ul,
ol {
  font-size: var(
    --pixel16
  ); // TODO: can we add a media query for 18px above small, it's being done in _content now
  line-height: 1.7;
  margin-bottom: 25px;

  @include media('>=s') {
    font-size: var(
      --pixel18
    ); // TODO: can we remove this and increase it to 18 in _reboot?
    line-height: 1.8;
  }

  &:last-child {
    margin-bottom: 0;
  }

  ul,
  ol {
    margin-top: 3px;
    margin-bottom: 3px;
  }
}

ul,
ol {
  margin-left: 30px;
  // line-height: 1.9;
}

ul ul,
ul ol,
ol ul,
ol ol {
  margin-bottom: 0;
  // line-height: 1.9;
}

ol li li {
  list-style-type: lower-alpha;
}

ol li li li {
  list-style-type: lower-roman;
}

blockquote {
  font-weight: 300;
  // font-style: italic;
  border-left: 0.2em solid var(--red);
  margin: 0 0 25px 0;
  padding: 0.5em 1em;

  cite {
    display: block;
    margin-top: 15px;
  }

  & p {
    margin-bottom: 0;
  }
}

img {
  max-width: 100%;
  height: auto;

  @include media('<=s') {
    width: 100%;
  }
}

audio {
  width: 100%;
  margin-bottom: 20px;
}

video {
  width: 100%;
  margin-bottom: 20px;
  height: auto;
  background-color: var(--grey-kenobi);
}

// 5. Table styles
// ---------------
table {
  width: 100%;
  font-size: var(--pixel14);
  margin-bottom: 20px;
  border-collapse: collapse;
  border-spacing: 0;
  vertical-align: top;
  display: block; // used to force responsive
  overflow-x: auto; // used to force responsive

  h2,
  h3,
  h4,
  h5,
  h6,
  p,
  ul,
  ol {
    font-size: var(--pixel14);
    border: none !important;
    margin-top: 0;

    &:not(:last-child) {
      margin-bottom: 5px;
    }
  }

  ul,
  ol {
    margin-left: var(--pixel18);
  }
}

table tr {
  border-top: 1px solid var(--grey);
  background-color: white;

  td {
    min-width: 145px;
  }
}

table tr:nth-child(2n) {
  background-color: #fbfbfb;
}

table tr th {
  font-weight: 700;
  border: 1px solid var(--grey);
  text-align: left;
  margin: 0;
}

table tr td {
  border: 1px solid var(--grey);
  text-align: left;
  margin: 0;
}

table thead tr th,
table tr td {
  padding: 15px;
  vertical-align: top;

  @include media('>s') {
    padding: 20px;
  }
}

table thead tr th {
  border: 1px solid var(--grey-emperor);
  background-color: var(--grey-emperor);
  color: white;
}

table tfoot tr td {
  border: 1px solid var(--grey-kenobi);
  background-color: var(--grey-kenobi);
  color: black;
}

table + figcaption {
  font-style: italic;
  margin-bottom: 25px;
}

td,
th {
  padding: 0;
  text-align: left;
}

// 6. Pre/Code
// -----------

pre {
  margin-bottom: 25px;
  height: auto;
}

code {
  font-family: 'SFMono-Regular', 'Consolas', 'Liberation Mono', 'Menlo', Courier,
    monospace;
  font-size: 1em;
  line-height: 1.4;
  background-color: var(--grey);
  //white-space: pre-wrap;
  word-break: normal;
  word-wrap: normal;
}

// 7. Form elements
// ----------------

// button,
// input,
// select,
// textarea {
// 	margin: 0;
// }

iframe {
  border: 0;
}

/**
 * Grid Global Styles
 */

.l-multicol {
  display: grid;
  grid-template-columns: 1;
  grid-gap: $grid-gutter;
  padding: $block-padding-s;
  margin: 0 auto;

  @include media('>layout-s') {
    padding: $block-margin;
  }

  // Remove side padding on all u-block elements
  .u-block {
    padding-left: 0;
    padding-right: 0;
  }

  // Set max width on main content area
  main {
    max-width: 760px;
    min-width: 0; // Needed for responsive pre code blocks

    // Change grey block bg to white
    .u-block--grey {
      background-color: white;
    }

    // Remove padding if u-block is last element
    .u-block--white:last-child {
      // padding-bottom: 0;
      padding-bottom: 20px;
    }

    // Remove top spacing when white/grey blocks follow each other
    .u-block--white + .u-block--grey,
    .u-block--grey + .u-block--white {
      padding-top: 0;
    }

    // Pull up the first white u-block
    & > .u-block--white {
      padding-top: 5px;
    }
  }
}

.multicol__nav {
  display: none;

  @include media('>layout-s') {
    display: block;
  }
}

.multicol__sidebar {
  .u-block:first-child,
  .u-block:first-of-type {
    padding-top: 0;
  }

  @include media('>s') {
    .u-block:first-child {
      padding-top: 10px;
    }

    .u-block:first-of-type {
      padding-top: 10px;
    }
  }
}

/**
 * Grid Aside + Main Layout
 */

.l-multicol--am {
  max-width: calc(1021px + #{$block-padding-s} * 2);

  @include media('>layout-s') {
    grid-template-columns: calc(200px + #{$layout-gutter}) auto;
    max-width: calc(1021px + #{$block-margin} * 2);

    // Add padding and border to nav element
    .multicol__nav {
      border-right: 1px solid $grey;
      padding-right: $grid-gutter;
    }
  }
}

/**
 * Grid Main + Aside Layout
 */

.l-multicol--ma {
  max-width: calc(1091px + #{$block-padding-s} * 2);

  @include media('>layout-s') {
    grid-template-columns: auto calc(270px + #{$layout-gutter});
    max-width: calc(1091px + #{$block-margin} * 2);

    // Add padding and border to sidebar element
    .multicol__sidebar {
      border-left: 1px solid $grey;
      padding-left: $grid-gutter;
    }
  }

  // Modifier to change element order when stacked
  @include media('<=layout-s') {
    &.l-multicol--sidebar-top {
      main {
        order: 2;
      }

      .multicol__sidebar {
        order: 1;
      }
    }
  }
}

/**
 * Grid Aside + Main + Aside Layout
 */

.l-multicol--ama {
  max-width: calc(1382px + #{$block-padding-s} * 2);

  // Add padding and border to nav element
  .multicol__nav {
    border-right: 1px solid $grey;
    padding-right: $grid-gutter;
  }

  @include media('>layout-s', '<layout-l') {
    grid-template-columns: calc(200px + #{$layout-gutter}) auto;
    max-width: calc(1382px + #{$block-margin} * 2);

    // Create grid template areas stacked layout
    grid-template-areas:
      'nav main'
      'nav sidebar';

    .multicol__nav {
      grid-area: nav;
    }

    main {
      grid-area: main;
    }

    .multicol__sidebar {
      grid-area: sidebar;
    }
  }

  @include media('>=layout-l') {
    grid-template-columns: calc(200px + #{$layout-gutter}) auto calc(
        270px + #{$layout-gutter}
      );

    // Add padding and border to sidebar element
    .multicol__sidebar {
      border-left: 1px solid $grey;
      padding-left: $grid-gutter;
    }
  }

  // Modifier to change element template areas and order when stacked
  &.l-multicol--sidebar-top {
    @include media('>layout-s', '<layout-l') {
      grid-template-areas:
        'nav sidebar'
        'nav main';
    }

    @include media('<=layout-s') {
      main {
        order: 2;
      }

      .multicol__sidebar {
        order: 1;
      }
    }
  }
}

// CSS Grid IE11 Fallback
// TODO: look into @support grid
@media screen and (-ms-high-contrast: active),
  screen and (-ms-high-contrast: none) {
  /**
    * Flexbox Global Styles
    */

  .l-multicol {
    display: flex;
    flex-wrap: wrap;

    .multicol__nav {
      flex: 0 0 calc(200px + #{$layout-gutter});
      max-width: calc(200px + #{$layout-gutter});
      width: calc(200px + #{$layout-gutter});
    }

    main {
      flex: 0 0 100%;

      @include media('>layout-s') {
        flex: 1;
      }
    }

    .multicol__sidebar {
      flex: 0 0 100%;
      margin-top: $grid-gutter;
    }
  }

  /**
    * Flexbox Aside + Main Layout
    */

  @include media('>layout-s') {
    .l-multicol--am {
      .multicol__nav {
        margin-right: $grid-gutter;
      }
    }
  }

  /**
    * Flexbox Main + Aside Layout
    */

  @include media('>layout-s') {
    .l-multicol--ma {
      main {
        margin-right: $grid-gutter;
      }

      .multicol__sidebar {
        flex: 0 0 calc(270px + #{$layout-gutter});
        width: calc(270px + #{$layout-gutter});
        margin-top: 0;
      }
    }
  }

  @include media('<=layout-s') {
    .l-multicol--ma.l-multicol--sidebar-top {
      .multicol__sidebar {
        margin-top: 0;
        margin-bottom: $grid-gutter;
      }
    }
  }

  /**
    * Flexbox Aside + Main + Aside Layout
    */

  .l-multicol--ama {
    @include media('>layout-s') {
      main {
        margin-left: $grid-gutter;
      }

      .multicol__nav {
        flex: 0 0 calc(200px + #{$layout-gutter});
        width: calc(200px + #{$layout-gutter});
        max-width: calc(200px + #{$layout-gutter});
      }
    }

    @include media('>layout-s', '<layout-l') {
      .multicol__sidebar {
        padding-left: calc(200px + #{$layout-gutter} + #{$grid-gutter});
      }
    }

    @include media('>=layout-l') {
      main {
        margin-right: $grid-gutter;
      }

      .multicol__sidebar {
        flex: 0 0 calc(270px + #{$layout-gutter});
        width: calc(270px + #{$layout-gutter});
        margin-top: 0;
      }
    }
  }
}
